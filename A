 const pdf = new jsPDF('p', 'mm', 'a4');
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();

    const addTableToPDF = (tableElement: HTMLElement, callback: () => void) => {
      html2canvas(tableElement).then(canvas => {
        const imgData = canvas.toDataURL('image/png');
        const imgProps = pdf.getImageProperties(imgData);
        const pdfWidth = pageWidth - 20; // Adjust margins
        const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;

        if (pdfHeight <= pageHeight - 20) {
          pdf.addImage(imgData, 'PNG', 10, 10, pdfWidth, pdfHeight);
        } else {
          let currentHeight = 10;
          const scale = imgProps.width / pdfWidth;
          const scaledPageHeight = (pageHeight - 20) * scale;
          let imgTop = 0;

          while (imgTop < imgProps.height) {
            const canvasPart = document.createElement('canvas');
            canvasPart.width = imgProps.width;
            canvasPart.height = Math.min(imgProps.height - imgTop, scaledPageHeight);
            const ctx = canvasPart.getContext('2d');
            ctx?.drawImage(canvas, 0, imgTop, imgProps.width, canvasPart.height, 0, 0, imgProps.width, canvasPart.height);
            const partData = canvasPart.toDataURL('image/png');
            pdf.addImage(partData, 'PNG', 10, currentHeight, pdfWidth, (canvasPart.height * pdfWidth) / canvasPart.width);
            imgTop += scaledPageHeight;
            if (imgTop < imgProps.height) {
              pdf.addPage();
            }
          }
        }
        callback();
      });
    };

    addTableToPDF(this.table1.nativeElement, () => {
      pdf.addPage();
      addTableToPDF(this.table2.nativeElement, () => {
        pdf.save('tables.pdf');
      });
    });
  }
