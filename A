import { Component, ElementRef, ViewChild } from '@angular/core';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

@Component({
  selector: 'app-table',
  templateUrl: './table.component.html',
  styleUrls: ['./table.component.css']
})
export class TableComponent {
  @ViewChild('table') table!: ElementRef;
  
  tableData = Array.from({ length: 20 }, (_, i) => ({
    id: i + 1,
    name: `Item ${i + 1}`,
    value: Math.floor(Math.random() * 100),
  }));

  async downloadPDF() {
    const rowsPerPage = 10; // Number of rows per page
    const totalPages = Math.ceil(this.tableData.length / rowsPerPage);
    const doc = new jsPDF();

    for (let i = 0; i < totalPages; i++) {
      if (i > 0) {
        doc.addPage(); // Add a new page for each chunk
      }

      // Create a temporary table with only 10 rows at a time
      const tempTable = document.createElement('table');
      tempTable.innerHTML = document.querySelector('table')!.innerHTML;
      tempTable.querySelectorAll('tbody tr').forEach((row, index) => {
        if (index < i * rowsPerPage || index >= (i + 1) * rowsPerPage) {
          row.remove(); // Remove rows not in the current chunk
        }
      });

      // Convert table to image using html2canvas
      const canvas = await html2canvas(tempTable);
      const imgData = canvas.toDataURL('image/png');
      const imgWidth = 190;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      
      doc.addImage(imgData, 'PNG', 10, 10, imgWidth, imgHeight);
    }

    doc.save('table.pdf'); // Save the generated PDF
  }
}
