package com.minishop.inventory.helper;

import com.minishop.inventory.model.Inventory;
import org.apache.poi.ss.usermodel.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class ExcelHelper {

    public static boolean hasExcelFormat(MultipartFile file) {
        return file != null &&
                file.getOriginalFilename() != null &&
                file.getOriginalFilename().toLowerCase().endsWith(".xlsx");
    }

    public static List<Inventory> excelToInventoryList(MultipartFile file) {
        try (Workbook workbook = WorkbookFactory.create(file.getInputStream())) {
            Sheet sheet = workbook.getSheetAt(0);
            if (sheet == null || sheet.getPhysicalNumberOfRows() <= 1) {
                throw new IllegalArgumentException("Excel file is empty or missing data rows.");
            }

            Iterator<Row> rows = sheet.iterator();
            List<Inventory> inventoryList = new ArrayList<>();

            int rowNumber = 0;
            while (rows.hasNext()) {
                Row currentRow = rows.next();

                // Skip header
                if (rowNumber == 0) {
                    rowNumber++;
                    continue;
                }

                // Skip completely blank rows
                if (isRowEmpty(currentRow)) continue;

                try {
                    Inventory inventory = new Inventory();
                    inventory.setProductName(getCellValue(currentRow.getCell(0)));
                    inventory.setCategory(getCellValue(currentRow.getCell(1)));
                    inventory.setStock(Integer.parseInt(getCellValue(currentRow.getCell(2))));
                    inventory.setPrice(new BigDecimal(getCellValue(currentRow.getCell(3))));
                    inventory.setCreatedDate(LocalDateTime.now());

                    if (inventory.getProductName().isBlank() || inventory.getCategory().isBlank()) {
                        continue; // skip invalid rows
                    }

                    inventoryList.add(inventory);

                } catch (Exception e) {
                    System.err.println("⚠️ Skipping invalid row " + rowNumber + ": " + e.getMessage());
                }

                rowNumber++;
            }

            if (inventoryList.isEmpty()) {
                throw new IllegalArgumentException("Excel file contains no valid inventory data.");
            }

            return inventoryList;

        } catch (IOException e) {
            throw new RuntimeException("Failed to parse Excel file: " + e.getMessage());
        }
    }

    private static boolean isRowEmpty(Row row) {
        if (row == null) return true;
        for (Cell cell : row) {
            if (cell != null && cell.getCellType() != CellType.BLANK && !getCellValue(cell).isBlank()) {
                return false;
            }
        }
        return true;
    }

    private static String getCellValue(Cell cell) {
        if (cell == null) return "";
        cell.setCellType(CellType.STRING);
        return cell.getStringCellValue().trim();
    }
}
